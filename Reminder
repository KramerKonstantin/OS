Шаблон выбора и его интерпретация:
  -E, --extended-regexp  ШАБЛОН — расширенное регулярное выражение
  -F, --fixed-regexp     ШАБЛОН — строки, разделённые символом новой строки
  -G, --basic-regexp     ШАБЛОН — простое регулярное выражение (по умолчанию)
  -P, --perl-regexp      ШАБЛОН — регулярное выражения языка Perl
  -e, --regexp=ШАБЛОН    использовать ШАБЛОН для поиска
  -f, --file=ФАЙЛ        брать ШАБЛОН из ФАЙЛа
  -i, --ignore-case      игнорировать различие регистра
  -w, --word-regexp      ШАБЛОН должен подходить ко всем словам
  -x, --line-regexp      ШАБЛОН должен подходить ко всей строке
  -z, --null-data        строки разделяются байтом с нулевым значением, а не
                         символом конца строки
 
Разное:
  -s, --no-messages         не показывать сообщения об ошибках
  -v, --invert-match        выбирать не подходящие строки
  -V, --version             показать информацию о версии и закончить работу
      --help                показать эту справку и закончить работу
 
Управление выводом:
  -m, --max-count=ЧИСЛО     остановиться после указанного
                            ЧИСЛА выбранных строк
  -b, --byte-offset         печатать вместе с выходными строками смещение в
                            байтах
  -n, --line-number         печатать номер строки вместе с выходными строками
      --line-buffered       сбрасывать буфер после каждой строки
  -H, --with-filename       печатать имя файла для каждой выводимой строки
  -h, --no-filename         не начинать вывод с имени файла
      --label=МЕТКА         использовать МЕТКУ в качестве имени файла для
                            стандартного ввода
  -o, --only-matching       показывать только часть строки, совпадающей с ШАБЛОНОМ
  -q, --quiet, --silent     подавлять весь обычный вывод
      --binary-files=ТИП    считать, что двоичный файл имеет ТИП:
                            «binary», «text» или «without-match».
  -a, --text                то же что и --binary-files=text
  -I                        то же, что и --binary-files=without-match
  -d, --directories=ДЕЙСТВ  как обрабатывать каталоги
                            ДЕЙСТВИЕ может быть «read» (читать),
                            «recurse» (рекурсивно) или «skip» (пропускать).
  -D, --devices=ДЕЙСТВ      как обрабатывать устройства, FIFO и сокеты
                            ДЕЙСТВИЕ может быть «read» или «skip»
  -r, --recursive           то же, что и --directories=recurse
  -R, --dereference-recursive                             тоже, но с переходом по всем символьным ссылкам
      --include=Ф_ШАБЛОН    обработать только файлы, подпадающие под Ф_ШАБЛОН
      --exclude=Ф_ШАБЛОН    пропустить файлы и каталоги,
                            подпадающие под Ф_ШАБЛОН
      --exclude-from=ФАЙЛ   пропустить файлы, подпадающие под шаблон
                            файлов из ФАЙЛА
      --exclude-dir=ШАБЛОН  каталоги, подпадающие под ШАБЛОН,
                            будут пропущены
  -L, --files-without-match печатать только имена ФАЙЛОВ без выбранных строк
  -l, --files-with-matches  печатать только имена ФАЙЛОВ с выбранными строками
  -c, --count               печатать только количество выбранных
                            строк на ФАЙЛ
  -T, --initial-tab         выравнивать табуляцией (если нужно)
  -Z, --null                печатать байт 0 после имени ФАЙЛА
 
Управление контекстом:
  -B, --before-context=ЧИС  печатать ЧИСЛО строк предшествующего контекста
  -A, --after-context=ЧИС   печатать ЧИСЛО строк последующего контекста
  -C, --context[=ЧИС]       печатать ЧИСЛО строк контекста
  -ЧИСЛО                    то же, что и --context=ЧИСЛО
      --color[=КОГДА],
      --colour[=КОГДА]      использовать маркеры для различия совпадающих
                            строк; КОГДА может быть «always» (всегда),
                            «never» (никогда) или «auto» (автоматически)
  -U, --binary              не удалять символы CR в конце строки
                            (MSDOS/Windows)
 
Если в качестве ФАЙЛА указан символ «-», то читается стандартный ввод.
Если ФАЙЛ не указан и задан параметр командной строки -r, то читается
текущий каталог «.»  и «-» в противном случае. Если указано менее двух
ФАЙЛОВ, то предполагается -h. При нахождении совпадений любой строки,
кодом завершения программы будет 0, и 1, если ничего не совпало.
При возникновении ошибок и если не указан параметр -q, кодом

sort:
-b - не учитывать пробелы
-d - использовать для сортировки только буквы и цифры
-i - сортировать только по ASCII символах
-n - сортировка строк linux по числовому значению
-r - сортировать в обратном порядке
-с - проверить был ли отсортирован файл
-o - вывести результат в файл
-u - игнорировать повторяющиеся строки
-m - объединение ранее отсортированных файлов
-k - указать поле по которому нужно сортировать строки, если не задано, сортировка выполняется по всей строке.
-f - использовать в качестве разделителя полей ваш символ вместо пробела.

Классы символов и Выражения в квадратных скобках.
[:alnum:]

Алфавитные символы: «[:alpha:]» и «[:digit:]»; в локали «C» и кодировке символов ASCII, это то же самое что и «[0-9A-Za-z]».

[:alpha:]

Алфавитные символы: «[:lower:]» и «[:upper:]»; в локали «C» и кодировке символов ASCII, это то же самое что и «[A-Za-z]».

[:blank:]

Пустые символы: пробел и табуляция.

[:cntrl:]

Управляющие символы. В ASCII эти символы имеют восьмеричные коды от 000 до 037 и 177 (DEL). В других наборах символов это эквивалентные символы, если они есть.

[:digit:]

Цифры: 0 1 2 3 4 5 6 7 8 9.

[:graph:]

Графические символы: «[:alnum:]» и «[:punct:]».

[:lower:]

Буквы в нижнем регистре, в локали «C» и кодировке символов ASCII это a b c d e f g h i j k l m n o p q r s t u v w x y z.

[:print:]

Печатные символы: «[:alnum:]», «[:punct:]», и пробел.

[:punct:]

Пунктуационные символы; в локали «C» и кодировке символов ASCII, это ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~.

[:space:]

Пробельные символы: в локали «C», это табуляция, новая строка, вертикальная табуляция, разрыв страницы, возврат каретки и пробел. Смотрите раздел Использование grep для дополнительной информации о совпадении новой строки.

[:upper:]

Буквы в верхнем регистре: в локали «C» и кодировке символов ASCII, это A B C D E F G H I J K L M N O P Q R S T U V W X Y Z.

[:xdigit:]

Шестнадцатеричные цифры: 0 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f.

Обратите внимание, что квадратные скобки в этих классах имён являются частью символических имён и должны быть включены в дополнение к квадратным скобкам, отделяющим выражения в квадратных скобках.

Большинство метасимволов теряют их специальное значение внутри выражений в квадратных скобках. Для включения буквального ] разместите его первым в списке. Аналогично литерал ^ разместите где-угодно, но только не первым. Наконец, для включения литерала - разместите его последним.

]

если не является первым пунктом, завершает выражение в квадратных скобках. Поэтому если вы хотите сделать символ «]» элементом списка, вы должны поставить его в начало.

 [.

обозначает открывающий символ сортировки

.]

обозначает закрывающий символ сортировки

[=

представляет открытие класса эквивалентности.

=]

представляет закрытие класса эквивалентности.

[:

представляет открывающий символ класса символов, за ним должно следовать действительное имя класса символов.

:]

представляет закрывающий символ класса символов.

-

представляет диапазон если не является первым или последним в списке или конечной точкой диапазона.

^

представляет символы не включаемые в список. Если вы хотите сделать символ ^ элементом списка, разместите её где-угодно кроме первой позиции.

Анкоры.
Каретка ^ и знак доллара $ являются метасимволами, которые представляют, соответственно, начало и конец строки. Они называются анкорами (буквально «якоря»), поскольку принудительно «якорят» совпадение, соответственно, к началу или концу строки.

Символы с обратным слешем и Специальные выражения

Символ \, когда за ним следует определённые обычные символы, принимает специальное значение:

\b

Обозначает край слова.

\B

Обозначает не край слова.

\<

Обозначает начало слова.

\>

Обозначает конец слова.

\w

Обозначает главные составные символы, это синоним для «[_[:alnum:]]».

\W

Обозначает не главные составные символы, это синоним для «[^_[:alnum:]]».

\s

Обозначает белые пробелы, это синоним для «[[:space:]]».

\S

Обозначает не белые пробелы, это синоним для «[^[:space:]]».


Повторения

За регулярным выражением может следовать один или несколько операторов повторения:

?

Предыдущий элемент опциональный (встречается ноль или один раз).

*

Предыдущий элемент встречается ноль или более раз.

+

Предыдущий элемент встречается один или более раз

{n}

Предыдущий элемент встречается ровно n раз.

{n,}

Предыдущий элемент встречается n или более раз.

{,m}

Предыдущий элемент встречается не более m раз.

{n,m}

Предыдущий элемент встречается по крайней мере n раз, но не более чем m раз.

xargs
Использование
xargs [-l число] [-I зам_цеп] [-n число] [-t] [-p] [-x] [-s размер] [-e [лконф_цеп]] [команда [начальный_аргумент…]]

Параметры запуска
-0
Использует во входном потоке символ-разделитель NULL ("\0") вместо "пробела" и "перевода строки", хорошо сочетается с опцией -print0 команды find
-l число
Выполнять команду для каждой группы из заданного числа непустых строк аргументов, прочитанных со стандартного ввода. Последний вызов команды может быть с меньшим числом строк аргументов. Считается, что строка заканчивается первым встретившимся символом перевода строки, если только перед ним не стоит пробел или символ табуляции; пробел/табуляция в конце сигнализируют о том, что следующая непустая строка является продолжением данной. Если число опущено, оно считается равным 1. Опция -l включает опцию -x.
-I зам_цеп
Режим вставки: команда выполняется для каждой строки стандартного ввода, причём вся строка рассматривается как один аргумент и подставляется в начальные_аргументы вместо каждого вхождения цепочки символов зам_цеп. Допускается не более 5 начальных_аргументов, содержащих одно или несколько вхождений зам_цеп. Пробелы и табуляции в начале вводимых строк отбрасываются. Сформированные аргументы не могут быть длиннее 255 символов. Если цепочка зам_цеп не задана, она полагается равной { }. Опция -I включает опцию -x.
-n число
Выполнить команду, используя максимально возможное количество аргументов, прочитанных со стандартного ввода, но не более заданного числа. Будет использовано меньше аргументов, если их общая длина превышает размер (см. ниже опцию -s), или если для последнего вызова их осталось меньше, чем заданное число. Если указана также опция -x, каждая группа из указанного числа аргументов должны укладываться в ограничение размера, иначе выполнение xargs прекращается.
-t
Режим трассировки: команда и каждый построенный список аргументов перед выполнением выводится в стандартный поток ошибок.
-p
Режим с приглашением: xargs перед каждым вызовом команды запрашивает подтверждение. Включается режим трассировки (-t), за счет чего печатается вызов команды, который должен быть выполнен, а за ним — приглашение ?…. Ответ y (за которым может идти что угодно) приводит к выполнению команды; при каком-либо другом ответе, включая возврат каретки, данный вызов команды игнорируется.
-x
Завершить выполнение, если очередной список аргументов оказался длиннее, чем размер (в символах). Опция -x включается опциями -i и -l. Если ни одна из опций -i, -l или -n не указана, общая длина всех аргументов должна укладываться в ограничение размера.
-s размер
Максимальный общий размер (в символах) каждого списка аргументов установить равным заданному размеру. Размер должен быть положительным числом, не превосходящим 470 (подразумеваемое значение). При выборе размера следует учитывать, что к каждому аргументу добавляется по одному символу; кроме того, запоминается число символов в имени команды.
-e [лконф_цеп]
Цепочка символов лконф_цеп считается признаком логического конца файла. Если опция -e не указана, признаком конца считается подчеркивание (_). Опция -e без лконф_цеп аннулирует возможность устанавливать логический конец файла (подчеркивание при этом рассматривается как обычный символ). Команда xargs читает стандартный ввод до тех пор, пока не дойдет до конца файла или не встретит цепочку лконф_цеп.
Выполнение программы xargs прекращается, если она получает от команды код завершения −1 или если команда не может быть выполнена. Если команда — это shell-программа, она должна явно выполнять exit с соответствующим аргументом, чтобы избежать случайного возврата кода −1.

cut
-b, --bytes=СПИСОК
выбрать только заданные байты
-c, --characters=СПИСОК
выбрать только заданные знаки
-d, --delimiter=РАЗДЕЛИТЕЛЬ
использовать для разделения полей РАЗДЕЛИТЕЛЬ вместо табуляции
-f, --fields=LIST
печатает только поля, перечисленные в списке полей. Поля по умолчанию разделяются символом TAB.
--complement
дополнить множество выбранных байт, знаков или полей.
-s, --only-delimited
не печатать строки, не содержащие разделителей
--output-delimiter=СТРОКА
использовать СТРОКУ для разделения полей при выводе, по умолчанию используется разделитель для ввода
--help
показать справку и выйти
--version
показать информацию о версии и выйти

wc
   wc -l <filename> вывести количество строк
   wc -c <filename> вывести количество байт
   wc -m <filename> вывести количество символов
   wc -L <filename> вывести длину самой длинной строки
   wc -w <filename> вывести количество слов

tr
-d
Удаляет все вхождения символов, указанных в строке 1. При этом преобразование не производится.
-s
Замещает каждую последовательность повторяющихся символов, перечисленных в последней указанной строке, на единственный такой символ.
-c, -C
Дополняет набор символов, задаваемый строкой 1.
-t
Сначала сократить строку 1 до размера строки 2. Если эта опция не указана, то размер строки 2 подгоняется под размер строки 1: если она больше, то обрезается, если меньше, то дополняется последним символом.

ps (process status) — программа в UNIX, Unix-подобных и других POSIX-совместимых 
операционных системах, выводящая отчёт о работающих процессах.
Опции, отбирающие процессы для отчёта:
  -A : все процессы;
  -a : связанные с конкретным терминалом, кроме главных системных процессов сеанса, 
      часто используемая опция;
  -N : отрицание выбора;
  -d : все процессы, кроме главных системных процессов сеанса;
  -e : все процессы;
  -f : расширение информации
  T : все процессы на конкретном терминале;
  a : процессы, связанные с текущим терминалом, а также процессы других пользователей;
  r : информация только о работающих процессах;
  x : процессы, отсоединённые от терминала.
Выводимая информация (cтолбцы):
  UID : идентификатор пользователя;
  PID : идентификатор процесса;
  PPID : идентификатор родительского процесса;
  C : приоритет процесса, используемый планировщиком задач;
  STIME : время старта процесса;
  TTY : терминал, с которым связан данный процесс;
  TIME : процессорное время, занятое этим процессом;
  CMD : команда, запустившая данный процесс «с некоторыми опциями выводит и каталог откуда процесс был запущен»;
  STAT : состояние, в котором на данный момент находится процесс.
Опция o позволяет указать набор столбцов в ответе.

mkdir - команда для создания каталогов.
touch - команд, предназначенная для установки времени последнего изменения файла или доступа в текущее время. Также используется для создания пустых файлов.

date: https://ru.wikipedia.org/wiki/Date

ping - это очень простой инструмент для диагностики сети. Она позволяет проверить доступен удаленный хост или нет и все.
$ ping опции адрес_узла

Формат команды ping очень прост. В качестве адреса узла можно передавать как ip адрес, так и доменное имя. Опции настраивают поведение утилиты. Рассмотрим основные из них:

-4 - использовать только ipv4 (по умолчанию);
-6 - использовать только ipv6;
-A - адаптивный режим, время между отправками пакета адаптируется к времени передачи и приема пакета, но не меньше чем 200мс;
-b - разрешить ping широковещательного адреса;
-с - количество пакетов, которые нужно отправить;
-D - выводить время в виде UNIX timestamp;
-f - режим флуда, в этом режиме пакеты передаются без задержек, может использоваться для совершения DoS атак на отдельные узлы. Количество точек, которые выводит утилита обозначает количество потерянных пакетов;
-i - интервал в секундах между отправкой пакетов;
-I - использовать этот сетевой интерфейс для отправки пакетов;
-l - режим перегрузки, отправляется очень много пакетов и система не следит за ответными пакетами;
-n - не получать домены для ip адресов;
-r - игнорировать таблицы маршрутизации и отправить пакет на указанный интерфейс;
-s - размер одного пакета;
-t - установить TTL вручную;
-v - более подробный вывод.

tail:
По умолчанию утилита выводит десять последних строк из файла, но ее поведение можно настроить с помощью опций:

-c - выводить указанное количество байт с конца файла;
-f - обновлять информацию по мере появления новых строк в файле;
-n - выводить указанное количество строк из конца файла;
--pid - используется с опцией -f, позволяет завершить работу утилиты, когда завершится указанный процесс;
-q - не выводить имена файлов;
--retry - повторять попытки открыть файл, если он недоступен;
-v - выводить подробную информацию о файле;

at:
at [-m] [-q очередь] [-f файл] ВРЕМЯ
Значение этих параметров:
-q используется для указания очереди. Очередь обозначается одной буквой; корректными очередями считаются очереди с идентификаторами от a до z и от A до Z. Очередь с идентификатором a используется по умолчанию, а очередь с идентификатором b является очередью для программы batch. Команды из очередей с идентификаторами, находящимися далее по алфавиту, выполняются с более высоким приоритетом (nice). Специальная очередь "=" зарезервирована для команд, исполняющихся в данный момент. Если команда добавлена в очередь, идентификатором которой является заглавная буква, считается, что команда передана программе batch. В том случае, если программе atq передан идентификатор очереди, программа выведет команды, находящиеся только в этой очереди.
-m позволяет отправить пользователю сообщение по электронной почте после выполнения задачи даже в том случае, когда выполненная программа ничего не вывела.
-f позволяет прочитать команды из файла, а не со стандартного ввода.
В качестве времени at принимает строки в форматах, совместимых со стандартом POSIX.2. Принимается строка, указывающая время в формате ЧЧ:ММ, позволяющая выполнить команду в назначенное время в течение дня. Вы также можете задать день для выполнения команды при помощи строки, указывающей дату в формате имени месяца и дня с необязательным указанием года или задав дату строкой формата ММДДГГ или ММ/ДД/ГГ или ДД.ММ.ГГ. Указание даты должно следовать за указанием времени.

crontab:
Каждый пользователь системы имеет свой файл заданий crontab, в котором описано, в какое время и какие программы запускать от имени этого пользователя. Для редактирования файла crontab используется специальная одноимённая программа crontab, позволяющая не прерывать процесс cron на время редактирования.

Вывести содержимое текущего файла расписания:

crontab -l
Удаление текущего файла расписания:

crontab -r
Для редактирования файла crontab вашего пользователя используется команда[2]:

crontab -e
Таблица crontab состоит из 6 колонок, разделяемых пробелами или табуляторами. Первые пять колонок задают время выполнения (Минута, Час, День, Месяц, День недели), в них может находиться число, список чисел, разделённых запятыми, диапазон чисел, разделённых дефисом, символы '*' или '/'. В системных файлах crontab после полей времени указывается пользователь, от которого запускается команда. Все остальные символы в строке интерпретируются как выполняемая команда с её параметрами. Если команда отправляет какой-нибудь текст в стандартный вывод, этот текст отправляется по e-mail пользователю.

nice:
nice [-n смещение] [--adjustment=смещение] [команда [аргумент…]]

У bash имеется встроенная команда trap, которая может перехватывать такие команды, как kill, nohup b и т.д., и выполнять какие-либо действия, заданные ей.

Синтаксис команды:
trap command signals

command — что именно необходимо выполнить при перехвате сигнала;
signals — список сигналов, которые необходимо перехватывать. Сигналы можно указывать как в полном виде — SIGTERM, так и в виде кода — 1, 2 и т.д.

cpulimit [ЦЕЛЬ] [ОПЦИИ...] [-- ПРОГРАММА С ОПЦИЯМИ]
ЦЕЛЬ должна быть в точности чем-то из:
   -p, --pid=N        pid процесса
   -e, --exe=ФАЙЛ     имя исполнимого файла программы
                      Опция -e работает только если
                      cpulimit запущена с правами администратора.
   -P, --path=ПУТЬ    абсолютный путь
                      до исполнимой программы
ОПЦИИ
   -b  --background   запуск в фоне
   -f  --foreground   запуск целевого процесса в фоне и ожидание его выхода
   -c  --cpu=N        переписать определение ЦПУ на машине
   -l, --limit=N      разрешённые для использования проценты cpu.
                      На одноядерных системах от 1 - 100, на многоядерных системах
                      может быть выше (обязательная опция)
   -m, --monitor-forks  Просмотр детей/форков целевого процесса
   -q, --quiet        запуск в тихом режиме (печатаются только ошибки).
   -k, --kill         завершить процесс, выходящий за лимиты
                      вместо того, чтобы ограничивать его.
   -r, --restore      Восстановить процессы, после того, как они
                      были завершены. Работает с флагом -k.
   -s, --signal=SIG   Отправить этот сигнал наблюдаемому процессу, когда cpulimit выходит.
                      Сигнал должен быть указан как номер, или 
                      SIGTERM, SIGCONT, SIGSTOP и т.д. SIGCONT это значение по умолчанию.
   -v, --verbose      показать контрольную статистику
   -z, --lazy         выйти если нет подходящего целевого процесса,
                      или если он завершился
       --             Это финальная опция CPUlimit. Все последующие
                      опции предназначены для другой запускаемой программы.
   -h, --help         показать справку и выйти

ln — команда Unix, создающая жёсткую ссылку или символьную ссылку на файл.
ln файл имя_ссылки
# создаётся «жёсткая» ссылка (hard link)
ln -s файл имя_ссылки
# создаётся «символьная» ссылка (symbolic link)

ls (dir, vdir) — утилита Unix, которая печатает в стандартный вывод содержимое каталогов.
Команда ls сначала выводит список всех файлов (не каталогов), перечисленных в командной строке, а затем выводит список всех файлов, находящихся в каталогах, перечисленных в командной строке. Если не указано ни одного файла, то по умолчанию аргументом назначается . (текущий каталог). Опция -d заставляет ls не считать аргументы-каталоги каталогами. Будут отображаться только файлы, которые не начинаются с . или все файлы, если задана опция -a.

Каждый список файлов (для файлов, которые не являются каталогами и для каждого каталога, содержащего список файлов) сортируется отдельно в алфавитной последовательности текущих региональных настроек (locale). Когда указана опция -l, то перед каждым списком выводится итоговая строка с общим размером всех файлов в списке, который измеряется в блоках (размер блока по умолчанию 1024 байта, и может быть изменен с помощью опции --block-size).

Результаты печатаются на стандартный вывод, по одному файлу на строку, если с помощью опции -C не задан многоколоночный вывод. Однако при выводе на терминал не определено, будет ли вывод осуществляться в одну колонку или в несколько. Для задания одноколоночного или многоколоночного режима вывода могут использоваться опции -1 и -C, соответственно.

head — утилита в UNIX и UNIX-подобных системах, выводящая первые n строк из файла, по умолчанию n равно 10.

date [ОПЦИИ] ... [+ФОРМАТ]
-d STRING или --date=STRING -> Вывод даты по указанной строке (например 'yesterday', 'tomorrow', 'last monday').
-l или --iso==8601[=FMT] -> Вывод даты в формате ISO 8601. FMT по умолчанию содержит 'date'. Также может содержать 'hourse', 'minutes', 'seconds', 'ns' для отображения соответствующих значений и часовой пояс относительно UTC рядом с датой.
--rfc-3339=FMT -> Вывод даты в формате RFC 3339. FMT по умолчанию содержит 'date'. Также может содержать 'seconds' и 'ns' для отображения секунд или наносекунд.
-r FILE или --reference=FILE -> Вывод даты последней модификации указанного файла в формате по умолчанию.
-u или --utc -> Вывод UTC-даты.
Формат	Значение
%%	Знак процента
%a	День недели текущей локали в короткой форме ("Чтв")
%A	День недели текущей локали в длинной форме ("Четверг")
%b	Месяц года текущей локали в короткой форме в родительном падеже ("янв")
%B	Месяц года текущей локали в длинной форме в родительном падеже ("января")
%c	Дата и время текущей локали без указания часового пояса
%С	Первые две цифры текущего года
%d	Числовой день месяца с ведущим нулём
%D	Дата в формате %m/%d/%y
%e	День месяца; аналог %_d
%F	Дата в формате %Y-%m-%d
%h	Аналог %b
%H	Часы (00..23)
%I	Часы (01..12)
%j	День года (001..366)
%m	Месяц (01..12)
%M	Минуты (00..59)
%n	Новая строка
%q	Квартал года
%S	Секунды (00..59)
%t	Знак табуляции
%T	Время в формате %H:%M:%S
%u	Числовой день недели; 1 — понедельник
%x	Дата в локальном формате
%X	Время в локальном формате
%Z	Аббревиатура временной зоны


